---
import AtroposComponent from "@/components/AtroposComponent.astro";
import type { PaymentMethodType } from "@/db/payment.ts";
const { name, short, image, pallete, cbu, alias, isWallet }: PaymentMethodType =
  Astro.props as PaymentMethodType;
const { background, gradientfrom, gradientto, border, shadow } = pallete;
---

<AtroposComponent customClass=`paymethod-atropos-${short}`>
  <div class={`paymethod ${short}`}>
    <img alt={`Logo de ${name}`} src={image} />
    <div class="cbucont">
      <span>{!isWallet ? "CBU" : "CVU"}:</span>
      <p id={`cbu-${short}`}>{cbu}</p>
      <button id={"copy-cbu-" + short}>
        <svg
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          fill="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            fill-rule="evenodd"
            d="M8 3c0-.6.4-1 1-1h6c.6 0 1 .4 1 1h2a2 2 0 0 1 2 2v15a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h2Zm6 1h-4v2H9a1 1 0 0 0 0 2h6a1 1 0 1 0 0-2h-1V4Zm-6 8c0-.6.4-1 1-1h6a1 1 0 1 1 0 2H9a1 1 0 0 1-1-1Zm1 3a1 1 0 1 0 0 2h6a1 1 0 1 0 0-2H9Z"
            clip-rule="evenodd"></path>
        </svg>
      </button>
    </div>
    <div class="cbucont">
      <span>ALIAS:</span>
      <p id={`alias-${short}`}>{alias}</p>
      <button id={"copy-alias-" + short}>
        <svg
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          fill="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            fill-rule="evenodd"
            d="M8 3c0-.6.4-1 1-1h6c.6 0 1 .4 1 1h2a2 2 0 0 1 2 2v15a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h2Zm6 1h-4v2H9a1 1 0 0 0 0 2h6a1 1 0 1 0 0-2h-1V4Zm-6 8c0-.6.4-1 1-1h6a1 1 0 1 1 0 2H9a1 1 0 0 1-1-1Zm1 3a1 1 0 1 0 0 2h6a1 1 0 1 0 0-2H9Z"
            clip-rule="evenodd"></path>
        </svg>
      </button>
    </div>
  </div>
</AtroposComponent>
<div id="notification" class="notification hidden">
  <span class="icon"
    ><svg
      xmlns="http://www.w3.org/2000/svg"
      width="1em"
      height="1em"
      viewBox="0 0 24 24"
    >
      <path
        fill="currentColor"
        d="M8 3.5A1.5 1.5 0 0 1 9.5 2h5A1.5 1.5 0 0 1 16 3.5v1A1.5 1.5 0 0 1 14.5 6h-5A1.5 1.5 0 0 1 8 4.5z"
      ></path>
      <path
        fill="currentColor"
        fill-rule="evenodd"
        d="M6.5 4.037c-1.258.07-2.052.27-2.621.84C3 5.756 3 7.17 3 9.998v6c0 2.829 0 4.243.879 5.122c.878.878 2.293.878 5.121.878h6c2.828 0 4.243 0 5.121-.878c.879-.88.879-2.293.879-5.122v-6c0-2.828 0-4.242-.879-5.121c-.569-.57-1.363-.77-2.621-.84V4.5a3 3 0 0 1-3 3h-5a3 3 0 0 1-3-3zM6.25 10.5A.75.75 0 0 1 7 9.75h10a.75.75 0 0 1 0 1.5H7a.75.75 0 0 1-.75-.75m1 3.5a.75.75 0 0 1 .75-.75h8a.75.75 0 0 1 0 1.5H8a.75.75 0 0 1-.75-.75m1 3.5a.75.75 0 0 1 .75-.75h6a.75.75 0 0 1 0 1.5H9a.75.75 0 0 1-.75-.75"
        clip-rule="evenodd"></path>
    </svg></span
  >
  <span class="message">Â¡Copiado al portapapeles!</span>
  <button class="close-btn"
    ><svg
      xmlns="http://www.w3.org/2000/svg"
      width="1em"
      height="1em"
      viewBox="0 0 32 32"
    >
      <path
        fill="currentColor"
        d="m24.778 21.42l-5.502-5.503l5.5-5.502l-2.827-2.83l-5.503 5.502l-5.502-5.502l-2.828 2.83l5.5 5.502l-5.5 5.502l2.83 2.828l5.5-5.502l5.5 5.502z"
      ></path>
    </svg></button
  >
</div>
<style define:vars={{ background, gradientfrom, gradientto, border, shadow }}>
  .paymethod {
    background: var(--background);
    background: linear-gradient(
      135deg,
      var(--gradientfrom) 0%,
      var(--gradientto) 100%
    );
    border-color: var(--border) !important;
    transition: 0.5s ease;
    width: 100%;
    max-width: 600px;
    border-radius: 8px;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 20px;
    border: solid 3px;
  }
  .paymethod img {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    border: 1px solid var(--border);
  }
  .cbucont {
    display: flex;
    align-items: center;
    margin-top: 10px;
    gap: 3px;
    span {
      font-weight: bold;
    }
  }
  .cbucont {
    display: flex;
    align-items: center;
    justify-content: center;
    p {
      max-width: 60%;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    button {
      padding: 8px;
      background-color: rgba(255, 255, 255, 0.4);
      border: none;
      border-radius: 8px;
      cursor: pointer;
      &:hover {
        background-color: rgba(255, 255, 255, 0.6);
      }
    }
  }
  svg {
    width: 20px;
    height: 20px;
    fill: #1f2937;
  }
  @media screen and (max-width: 768px) {
    .paymethod {
      width: 100%;
    }
  }
  .bmcb {
    padding-inline: 24px;
    padding-block: 8px;
    margin-top: 4px;
  }
  .notification {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 100;
    background-color: #22c55e;
    color: white;
    padding: 10px 20px;
    border-radius: 5px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    transition:
      transform 0.3s ease,
      opacity 0.3s ease;
    display: flex;
    align-items: center;
    opacity: 0;
    transform: translateY(100%);
  }
  .notification {
    opacity: 0;
    transform: translateY(20px); /* Cambia el desplazamiento hacia abajo */
    transition:
      transform 0.3s ease,
      opacity 0.3s ease;
  }
  .notification.show {
    opacity: 1;
    transform: translateY(0);
  }
  .icon {
    margin-right: 10px;
  }
  .close-btn {
    margin-left: auto;
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    font-size: 18px;
  }
  .close-btn:hover {
    opacity: 0.8;
  }
  .ripple {
    position: absolute;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.6);
    transform: scale(0);
    animation: ripple-animation 0.6s linear;
  }
  @keyframes ripple-animation {
    to {
      transform: scale(4);
      opacity: 0;
    }
  }
</style>
<script is:inline define:vars={{ short }}>
  const copyCBU = document.getElementById("copy-cbu-" + short);
  const copyALIAS = document.getElementById("copy-alias-" + short);
  copyCBU.addEventListener("click", () => copyToClipboard(`cbu-${short}`));
  copyALIAS.addEventListener("click", () => copyToClipboard(`alias-${short}`));
  function copyToClipboard(elementId) {
    var copyText = document.getElementById(elementId);
    var tempInput = document.createElement("input");
    tempInput.value = copyText.textContent;
    document.body.appendChild(tempInput);
    tempInput.select();
    document.execCommand("copy");
    document.body.removeChild(tempInput);
    showNotification();
  }
  function showNotification() {
    const notification = document.getElementById("notification");
    notification.classList.remove("hidden");
    notification.classList.add("show");
    setTimeout(() => {
      notification.classList.remove("show");
      setTimeout(() => {
        notification.classList.add("hidden");
      }, 300);
    }, 3000);
    const closeBtn = notification.querySelector(".close-btn");
    closeBtn.addEventListener("click", () => {
      notification.classList.remove("show");
      setTimeout(() => {
        notification.classList.add("hidden");
      }, 300);
    });
    closeBtn.addEventListener("mousedown", (e) => {
      const ripple = document.createElement("span");
      const rect = closeBtn.getBoundingClientRect();
      const size = Math.max(rect.width, rect.height);
      ripple.classList.add("ripple");
      ripple.style.width = ripple.style.height = `${size}px`;
      ripple.style.left = `${e.clientX - rect.left - size / 2}px`;
      ripple.style.top = `${e.clientY - rect.top - size / 2}px`;
      closeBtn.appendChild(ripple);

      ripple.addEventListener("animationend", () => {
        ripple.remove();
      });
    });
  }
</script>